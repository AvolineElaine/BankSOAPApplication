
package bank.services;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "BankOperationSvc", targetNamespace = "http://services.bank/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface BankOperationSvc {


    /**
     * 
     * @param amount
     * @param sourceAccount
     * @param title
     * @param destinationAccount
     * @throws OperationException_Exception
     * @throws AuthorizationException_Exception
     * @throws ValidationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "makeTransfer", targetNamespace = "http://services.bank/", className = "bank.services.MakeTransfer")
    @ResponseWrapper(localName = "makeTransferResponse", targetNamespace = "http://services.bank/", className = "bank.services.MakeTransferResponse")
    @Action(input = "http://services.bank/BankOperationSvc/makeTransferRequest", output = "http://services.bank/BankOperationSvc/makeTransferResponse", fault = {
        @FaultAction(className = AuthorizationException_Exception.class, value = "http://services.bank/BankOperationSvc/makeTransfer/Fault/AuthorizationException"),
        @FaultAction(className = OperationException_Exception.class, value = "http://services.bank/BankOperationSvc/makeTransfer/Fault/OperationException"),
        @FaultAction(className = ValidationException_Exception.class, value = "http://services.bank/BankOperationSvc/makeTransfer/Fault/ValidationException")
    })
    public void makeTransfer(
        @WebParam(name = "title", targetNamespace = "")
        String title,
        @WebParam(name = "amount", targetNamespace = "")
        String amount,
        @WebParam(name = "sourceAccount", targetNamespace = "")
        String sourceAccount,
        @WebParam(name = "destinationAccount", targetNamespace = "")
        String destinationAccount)
        throws AuthorizationException_Exception, OperationException_Exception, ValidationException_Exception
    ;

    /**
     * 
     * @param amount
     * @param destinationAccount
     * @throws OperationException_Exception
     * @throws AuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "makeDeposit", targetNamespace = "http://services.bank/", className = "bank.services.MakeDeposit")
    @ResponseWrapper(localName = "makeDepositResponse", targetNamespace = "http://services.bank/", className = "bank.services.MakeDepositResponse")
    @Action(input = "http://services.bank/BankOperationSvc/makeDepositRequest", output = "http://services.bank/BankOperationSvc/makeDepositResponse", fault = {
        @FaultAction(className = AuthorizationException_Exception.class, value = "http://services.bank/BankOperationSvc/makeDeposit/Fault/AuthorizationException"),
        @FaultAction(className = OperationException_Exception.class, value = "http://services.bank/BankOperationSvc/makeDeposit/Fault/OperationException")
    })
    public void makeDeposit(
        @WebParam(name = "amount", targetNamespace = "")
        int amount,
        @WebParam(name = "destinationAccount", targetNamespace = "")
        String destinationAccount)
        throws AuthorizationException_Exception, OperationException_Exception
    ;

    /**
     * 
     * @param amount
     * @param destinationAccount
     * @throws OperationException_Exception
     * @throws AuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "makeWithdraw", targetNamespace = "http://services.bank/", className = "bank.services.MakeWithdraw")
    @ResponseWrapper(localName = "makeWithdrawResponse", targetNamespace = "http://services.bank/", className = "bank.services.MakeWithdrawResponse")
    @Action(input = "http://services.bank/BankOperationSvc/makeWithdrawRequest", output = "http://services.bank/BankOperationSvc/makeWithdrawResponse", fault = {
        @FaultAction(className = AuthorizationException_Exception.class, value = "http://services.bank/BankOperationSvc/makeWithdraw/Fault/AuthorizationException"),
        @FaultAction(className = OperationException_Exception.class, value = "http://services.bank/BankOperationSvc/makeWithdraw/Fault/OperationException")
    })
    public void makeWithdraw(
        @WebParam(name = "amount", targetNamespace = "")
        int amount,
        @WebParam(name = "destinationAccount", targetNamespace = "")
        String destinationAccount)
        throws AuthorizationException_Exception, OperationException_Exception
    ;

}
