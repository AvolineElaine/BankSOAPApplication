
package bank.services;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "AuthorizationSvc", targetNamespace = "http://services.bank/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface AuthorizationSvc {


    /**
     * 
     * @param password
     * @param firstname
     * @param username
     * @param lastname
     * @throws ValidationException_Exception
     * @throws AuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "register", targetNamespace = "http://services.bank/", className = "bank.services.Register")
    @ResponseWrapper(localName = "registerResponse", targetNamespace = "http://services.bank/", className = "bank.services.RegisterResponse")
    @Action(input = "http://services.bank/AuthorizationSvc/registerRequest", output = "http://services.bank/AuthorizationSvc/registerResponse", fault = {
        @FaultAction(className = AuthorizationException_Exception.class, value = "http://services.bank/AuthorizationSvc/register/Fault/AuthorizationException"),
        @FaultAction(className = ValidationException_Exception.class, value = "http://services.bank/AuthorizationSvc/register/Fault/ValidationException")
    })
    public void register(
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "firstname", targetNamespace = "")
        String firstname,
        @WebParam(name = "lastname", targetNamespace = "")
        String lastname)
        throws AuthorizationException_Exception, ValidationException_Exception
    ;

    /**
     * 
     * @throws AuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "logout", targetNamespace = "http://services.bank/", className = "bank.services.Logout")
    @ResponseWrapper(localName = "logoutResponse", targetNamespace = "http://services.bank/", className = "bank.services.LogoutResponse")
    @Action(input = "http://services.bank/AuthorizationSvc/logoutRequest", output = "http://services.bank/AuthorizationSvc/logoutResponse", fault = {
        @FaultAction(className = AuthorizationException_Exception.class, value = "http://services.bank/AuthorizationSvc/logout/Fault/AuthorizationException")
    })
    public void logout()
        throws AuthorizationException_Exception
    ;

    /**
     * 
     * @param password
     * @param username
     * @return
     *     returns java.lang.String
     * @throws ValidationException_Exception
     * @throws AuthorizationException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "login", targetNamespace = "http://services.bank/", className = "bank.services.Login")
    @ResponseWrapper(localName = "loginResponse", targetNamespace = "http://services.bank/", className = "bank.services.LoginResponse")
    @Action(input = "http://services.bank/AuthorizationSvc/loginRequest", output = "http://services.bank/AuthorizationSvc/loginResponse", fault = {
        @FaultAction(className = AuthorizationException_Exception.class, value = "http://services.bank/AuthorizationSvc/login/Fault/AuthorizationException"),
        @FaultAction(className = ValidationException_Exception.class, value = "http://services.bank/AuthorizationSvc/login/Fault/ValidationException")
    })
    public String login(
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "password", targetNamespace = "")
        String password)
        throws AuthorizationException_Exception, ValidationException_Exception
    ;

    /**
     * 
     * @throws AuthorizationException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteUser", targetNamespace = "http://services.bank/", className = "bank.services.DeleteUser")
    @ResponseWrapper(localName = "deleteUserResponse", targetNamespace = "http://services.bank/", className = "bank.services.DeleteUserResponse")
    @Action(input = "http://services.bank/AuthorizationSvc/deleteUserRequest", output = "http://services.bank/AuthorizationSvc/deleteUserResponse", fault = {
        @FaultAction(className = AuthorizationException_Exception.class, value = "http://services.bank/AuthorizationSvc/deleteUser/Fault/AuthorizationException")
    })
    public void deleteUser()
        throws AuthorizationException_Exception
    ;

    /**
     * 
     * @return
     *     returns bank.services.User
     * @throws AuthorizationException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCurrentUser", targetNamespace = "http://services.bank/", className = "bank.services.GetCurrentUser")
    @ResponseWrapper(localName = "getCurrentUserResponse", targetNamespace = "http://services.bank/", className = "bank.services.GetCurrentUserResponse")
    @Action(input = "http://services.bank/AuthorizationSvc/getCurrentUserRequest", output = "http://services.bank/AuthorizationSvc/getCurrentUserResponse", fault = {
        @FaultAction(className = AuthorizationException_Exception.class, value = "http://services.bank/AuthorizationSvc/getCurrentUser/Fault/AuthorizationException")
    })
    public User getCurrentUser()
        throws AuthorizationException_Exception
    ;

}
